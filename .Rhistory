source('C:/Users/Steven/Desktop/EE232E_HW3/HW3.R')
View(graph_data)
View(graph_data)
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3.R')
View(graph_data)
View(graph_data)
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3.R')
View(graph_data)
View(graph_data)
summary(directed_network)
directed_network
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3.R')
summary(g1)
isconnected(g1)
is.connected(g1)
connectivity = is.connected(g1)
connectivity
sprintf(['Connectivity of network: %b',connectivity])
sprintf('Connectivity of network: %b',connectivity)
sprintf('Connectivity of network: %l',connectivity)
sprintf('Connectivity of network: ',connectivity)
sprintf('Connectivity of network: %i',connectivity)
sprintf('Connectivity of network: %d',connectivity)
if (connectivity == 1) {
sprintf('The network is connected')
} else {
sprintf('The newtork is not connected')
}
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
# This code is programmed in R v2.15.2.with iGraph v0.7.0 and netrw v0.2.6
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
####################  QUESTION 1 ####################
graph_data <- read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read text file
colnames(graph_data) <- c("Node 1", "Node 2", "weights")
g1 <- graph.data.frame(graph_data,directed = TRUE) # covert table to directed garph
connectivity <- is.connected(g1) #check if network is connected
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
print(g1)
print(vertices(g1))
vertices(g1)
vcount(g1)
connectivity <- is.connected(g1,mode = "strong") #check if network is connected
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
####################  QUESTION 1 ####################
graph_data <- read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read text file
colnames(graph_data) <- c("Node 1", "Node 2", "weights")
g1 <- graph.data.frame(graph_data,directed = TRUE) # covert table to directed garph
connectivity <- is.connected(g1,mode = "strong") #check if network is connected
if (connectivity == 1) {
sprintf('The network is connected')
} else {
sprintf('The newtork is not connected')
cl <- clusters(g1, mode = "strong")
gccIndex <- which.max(cl$csize)
nonGCCnodes <- (1:vcount(g1))[cl$membership != gccIndex]
gcc <- delete.vertices(g1,nonGCCnodes)
}
print(gcc)
print(g1)
plot(g1)
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
gcc$weights
g1$weights
E(gcc$weights)
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
E(undirected_1$weights)
E(undirected_1$weights)
E(undirected_1)$weights
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
m_1
s_1
print(s_1)
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
s_1
m_1
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
m_sa
m_2a
m_2a
m_2b
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
s_2a
s_2b
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
s_2b
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
s_2b
which.max(s_2b)
test = which.max(s_2b)
tse
test
test+1
test*0
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
sub_GCC_m
sub_GCC_s
large_community_index = which(sizes(community_option_2b)>100)
large_community_index = which(sizes(community_2b)>100)
large_community_index
s_2a
s_2b
large_community_index = which(sizes(community_2b)>100)
large_modularity = c()
large_size = c()
for (i in 1:length(large_community_index)) {
nodes_to_del = (1:vcount(undirected_2))[community_2b$membership != large_community_index[i]]
temp_sub_graph = delete.vertices(undirected_2, nodes_to_del)
temp_sub_com = fastgreedy.community(temp_sub_graph)
modularity_100_2b = c(modularity_100_2b, modularity(temp_sub_com))
sizes_100_2b = c(sizes_100_2b, sizes(temp_sub_com)
}
modularity_100_2b
sizes_100_2b
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
large_community_index = which(sizes(community_2b)>100)
large_modularity = c()
large_size = c()
for (i in 1:length(large_community_index)) {
nodes_to_del = (1:vcount(undirected_2))[community_2b$membership != large_community_index[i]]
temp_sub_graph = delete.vertices(undirected_2, nodes_to_del)
temp_sub_com = fastgreedy.community(temp_sub_graph)
large_modularity = c(modularity_100_2b, modularity(temp_sub_com))
large_size = c(sizes_100_2b, sizes(temp_sub_com))
}
large_modularity
large_size
large_modularity
length(large_community_index)
cat(s_1)
print(s_1)
cat('community index',i)
cat('community index',i,'that is larger than 100')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
s_2b
s_2b
m_2b
m_2a
sub_GCC_m
sub_GCC_s
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3_q1.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/hw3_brendan.R')
source('C:/Users/Steven/Desktop/EE232E_HW3/hw3_brendan.R')
